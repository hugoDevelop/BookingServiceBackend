// <auto-generated />
using System;
using BookingServiceBackend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookingServiceBackend.Migrations
{
    [DbContext(typeof(BookingContext))]
    partial class BookingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("BookingServiceBackend.Models.Cliente", b =>
                {
                    b.Property<int>("ClienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ClienteId"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Telefono")
                        .HasColumnType("longtext");

                    b.HasKey("ClienteId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("BookingServiceBackend.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthAudience")
                        .HasColumnType("longtext");

                    b.Property<string>("AuthClientId")
                        .HasColumnType("longtext");

                    b.Property<string>("AuthClientSecret")
                        .HasColumnType("longtext");

                    b.Property<string>("AuthIssuer")
                        .HasColumnType("longtext");

                    b.Property<int>("AuthMethod")
                        .HasColumnType("int");

                    b.Property<string>("AuthOpenIdConfigUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("AuthRedirectUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("AuthRedirectUrlMobile")
                        .HasColumnType("longtext");

                    b.Property<string>("AuthScope")
                        .HasColumnType("longtext");

                    b.Property<string>("AuthTokenUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("AuthUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Schema")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthAudience = "api://b863ee15-3508-4086-8f5c-c58438ce4e86",
                            AuthClientId = "b863ee15-3508-4086-8f5c-c58438ce4e86",
                            AuthIssuer = "https://sts.windows.net/1859b7bf-2192-44b7-9ca5-7af2a00d298d/",
                            AuthMethod = 0,
                            AuthOpenIdConfigUrl = "https://login.microsoftonline.com/common/v2.0/.well-known/openid-configuration",
                            AuthRedirectUrl = "http://localhost:5173/callback",
                            AuthRedirectUrlMobile = "com.booking.app://callback",
                            AuthScope = "api://b863ee15-3508-4086-8f5c-c58438ce4e86/usr-tst",
                            AuthTokenUrl = "https://login.microsoftonline.com/common/oauth2/v2.0/token",
                            AuthUrl = "https://login.microsoftonline.com/common/oauth2/v2.0/authorize",
                            Name = "Restaurant Company",
                            Schema = "com.booking.app"
                        });
                });

            modelBuilder.Entity("BookingServiceBackend.Models.Reserva", b =>
                {
                    b.Property<int>("ReservaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ReservaId"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaReserva")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ServicioId")
                        .HasColumnType("int");

                    b.HasKey("ReservaId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("ServicioId");

                    b.ToTable("Reservas");
                });

            modelBuilder.Entity("BookingServiceBackend.Models.Servicio", b =>
                {
                    b.Property<int>("ServicioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ServicioId"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("ServicioId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Servicios");
                });

            modelBuilder.Entity("BookingServiceBackend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Rol")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 1,
                            Email = "admin@userbookingservicetestoutlo.onmicrosoft.com",
                            Name = "Admin",
                            Rol = 0
                        });
                });

            modelBuilder.Entity("BookingServiceBackend.Models.Cliente", b =>
                {
                    b.HasOne("BookingServiceBackend.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("BookingServiceBackend.Models.Reserva", b =>
                {
                    b.HasOne("BookingServiceBackend.Models.Cliente", "Cliente")
                        .WithMany("Reservas")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingServiceBackend.Models.Servicio", "Servicio")
                        .WithMany("Reservas")
                        .HasForeignKey("ServicioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");

                    b.Navigation("Servicio");
                });

            modelBuilder.Entity("BookingServiceBackend.Models.Servicio", b =>
                {
                    b.HasOne("BookingServiceBackend.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("BookingServiceBackend.Models.User", b =>
                {
                    b.HasOne("BookingServiceBackend.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("BookingServiceBackend.Models.Cliente", b =>
                {
                    b.Navigation("Reservas");
                });

            modelBuilder.Entity("BookingServiceBackend.Models.Servicio", b =>
                {
                    b.Navigation("Reservas");
                });
#pragma warning restore 612, 618
        }
    }
}
